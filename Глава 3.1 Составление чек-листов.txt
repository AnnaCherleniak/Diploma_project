Глава 3. Составление тестовой докуменации для ручному тестированию веб-приложения

3.1 Составление чек-листов

Чек-листы тестировщика – это список задач, которые нужно выполнить в процессе тестирования. В чек-листе могут быть перечислены тест-кейсы, условия тестирования, требования к продукту и многое другое. Цель чек-листа – не пропустить ни одной важной детали в процессе тестирования.
Использование чек-листов помогает тестировщикам упростить и структурировать свою работу, а также не забыть важные детали. Кроме того, чек-листы могут быть использованы в качестве инструмента для автоматизации тестирования.
Составление чек-листов – это процесс, который может значительно упростить и ускорить тестирование программного обеспечения. Ниже представлены основные шаги, которые помогут вам составить эффективный чек-лист.
1. Определите цели и задачи. Перед тем, как начать составление чек-листа, необходимо понять, какие задачи вы хотите решить с помощью него. Какие функциональные возможности продукта вы хотите проверить? Какие аспекты безопасности требуют особого внимания? Что важно для пользователей? Определите цели и задачи, которые вы хотите достичь с помощью чек-листа, и исходя из этого составьте его структуру.
2. Разбейте на категории. Разбейте продукт на категории и подкатегории, чтобы вам было легче ориентироваться. Например, если вы тестируете веб-приложение, вы можете разбить его на следующие категории: регистрация, авторизация, работа с профилем пользователя, работа с контентом, оплата и т.д. Каждая категория должна содержать соответствующие тест-кейсы.
3. Проверьте чек-лист. Проверьте ваш чек-лист на полноту и актуальность. Убедитесь, что вы не упустили ничего важного и что все соответствуют целям и задачам, которые вы определили в начале.
Составление чек-листа – это творческий процесс, который требует от вас внимательности, аккуратности и профессионализма. Чем более структурированным и подробным будет ваш чек-лист, тем более эффективнее и быстрее будет проходить тестирование.
Некоторые советы, которые помогут вам составить более эффективный чек-лист
● Используйте чек-листы в качестве дополнительного инструмента. Чек-листы не могут заменить полноценное тестирование продукта, но могут помочь выявить проблемы и ошибки быстрее и более эффективно.
● Составляйте чек-листы в соответствии с конкретными требованиями. Каждый продукт имеет свои уникальные особенности, поэтому чек-листы должны быть адаптированы под конкретный продукт и его требования.
● Обновляйте чек-листы регулярно. Продукты постоянно меняются и обновляются, поэтому чек-листы должны быть пересматриваемы и обновляемы регулярно.
● Работайте в команде. Чек-листы могут быть использованы как инструмент для совместной работы тестировщиков и разработчиков. Разделите ответственность между членами команды и используйте чек-листы для координации работы.
Чем более детально и конкретно вы составите чек-лист, тем более эффективным будет тестирование продукта.
Составление чек-листов - это важный инструмент для эффективного тестирования продуктов. Чек-листы помогают выявлять проблемы и ошибки быстрее и более эффективно, а также упрощают совместную работу тестировщиков и разработчиков. Следуйте советам, описанным выше, и создавайте детальные и адаптированные под конкретный продукт чек-листы, чтобы обеспечить более качественное тестирование продукта.

Правила составления.

1. Один пункт — одна операция.
Пункты чек-листа — это однозначные атомарные (выполняющее одно действие) и полные (логически завершённые) операции. Например, авторизация в профиль пользователя и редактирование данных пользователя — две разные задачи. В списке проверок их оформляют отдельными пунктами.
2. Пункты всегда начинаются с существительного или глагола неопределённой формы. При составлении пунктов важно придерживаться унифицированных форм: начинать их с существительного («Проверка», «Добавление», «Отправка») или неопределённой формы глагола («Проверить», «Добавить», «Отправить»). Так пункты будут понятными и однозначными.
3. Соблюдайте структуру. Чтобы выполнять чек-лист было удобно, лучше составлять тесты так, чтобы они исходили из логики использования функционала. Например:
● в рамках раздела «Регистрация и Личный профиль» — регистрация на сайте, редактирование профиля;
● в рамках раздела «Форма обратной связи» — валидация полей, отправка письма, доставка письма.
4. Ничего не придумывайте. Чек-лист важно составлять, опираясь на требования. Не придумывайте то, чего нет в требовании.
5. Общепринятые названия. Хорошо, когда в команде все разговаривают на одном языке, используют общую терминологию.
Если один тестировщик в команде называет линию, разделяющую элементы на странице, дивайдером, а остальные — сепаратором, может возникнуть недопонимание.

Правила выполнения чек-листа
1. Не пропускать проверки чек-листа. Если какие-то пункты нельзя проверить из-за багов или недоступности среды, надо отметить их и вернуться к ним позже.
2. Если указываются тестовые данные, нужно использовать именно их.
3. Указывать результат и комментарий.

Резолюция
Когда исследуемый объект протестирован, нужно выставить кейсу резолюцию, то есть вердикт — прошёл он проверку или нет.
Рассмотрим распространённые статусы и разберёмся, какой из них когда используется:
● passed — успешно пройден
● failed — кейс не прошел проверку
● skipped — пропуск проверки
● blocked — проверка заблокирована
● untested — кейс еще не брали в работу
passed ставится, когда исследуемый объект проходит проверку в соответствии с ТЗ.
failed – исследуемый объект не соответствует ТЗ. Например, функционал поломан, не работает или его нет (разработчик потерял кнопку).
skipped — пропуск проверки кейса. Например, из-за нехватки времени или если в кейсе есть неточности: он устарел, из документации вы понимаете, что его уже изменили в проекте.
blocked — проверка заблокирована поломанным функционалом, от которого прямо или косвенно зависит тестируемый. Например, есть функционал «авторизация пользователя» и функционал «редактирование данных пользователя». Разработчик допустил ошибку в коде и функционал авторизации поломан — ему мы выносим резолюцию failed. Проверить редактирование данных пользователя не можем — выставляем статус blocked. В комментарии указываем, почему не можем протестировать этот функционал.
В данном проекте Чек-лист применялся при  Исследовательском тестировании, как основная тестовая документация. Чек-лист выполнялся в Qase.io (Приложение 2). 
