      3.2 Составление чек-кейсов

Тест-кейс — это такое описание проверки работы системы, которое может выполнить любой человек из команды, будь то тестировщик, разработчик, аналитик или даже бизнес-заказчик.
Набор тест-кейсов называется тестовым набором (test suite).
Стандартные атрибуты тест-кейса на этапе их проектирования:
1. Номер —  уникальный идентификатор тест-кейса. Его удобно использовать для одинакового понимания, о какой проверке идет речь (например, дать ссылку в баге).
2. Название — краткое описание сути проверки. Должно помещаться в твиттер и быть понятным! Кратко, но емко.
3. Предварительные шаги —  описание действий, которые необходимо выполнить, но прямого отношения к проверке они не имеют (например, зарегистрироваться в системе для проверки создания элемента). Если предварительных шагов нет, то секция не заполняется.
Шаги — описание действий, необходимых для проверки (например, создание элемента).
4. Ожидаемый результат (ОР) — сама проверка: что мы ожидаем получить после выполнения шагов ("Элемент создан").
5. Приоритет тест-кейса зависит от приоритета функций и сценариев, которые он проверяет. Определяет очерёдность выполнения теста во время тестирования. Например, при высоком приоритете тест-кейс будет в начале очереди на выполнение, а при низком — в конце. Если во втором случае что-то сломано, для нас это не так критично, как в первом.
6. Тестовые данные — данные, которые используются для проверки. Могут указываться в шагах тест-кейса или в отдельном файле с указанием ссылки на них. Это, например, данные для авторизации пользователя или данные тестовой карты для оплаты заказа.
7. Предусловия — действия, которые нужно выполнить, прежде чем приступать к тест-кейсу, а также настройки приложения и тестовой среды. Например, если мы проверяем отправку сообщения в чате с другом в социальной сети, мы точно знаем, что пользователь должен быть авторизован. Но сама авторизация как набор действий с вводом логина/пароля не имеет отношения к отправке сообщения другу. Таким образом, правильно будет указать в предусловии этого кейса, что пользователь должен быть авторизован, а страница чата — открыта. В самих шагах мы будем описывать действия, имеющие непосредственное отношение к отправке сообщения другу.
8. Постусловия — выполнение тест-кейса, как правило, переводит систему из одного состояния в другое: меняются настройки, производятся расчёты. Состояние, в которое нужно привести систему после прохождения тест-кейса, указывается в постусловии. Допустим, мы проводили тестирование кейса с редактированием данных пользователя на боевом сервере (на окружении, которым пользуются обычные пользователи) и в процессе тестирования изменили часть данных на ненастоящие: вместо имени указали странную последовательность букв, в описании интересов написали несвязный текст, вместо фотографии человека прикрепили небо. Но, так как мы тестируем на продакшене, наш тестовый профиль может попасть в выдачу обычным пользователям, и это будет выглядеть странно. Чтобы этого избежать, мы можем в постусловиях указать, что все изменённые значения надо вернуть в исходное состояние и указать, какие данные надо ввести в каждое поле.

Атрибуты на этапе исполнения тест-кейсов:
1. Фактический результат — то, что мы получаем после выполнения всего тест-кейса или его конкретного шага. Это необязательный атрибут, его можно не указывать. Но если он указывается, в нём может быть как краткое описание того, что мы получили по факту прохождения шага / шагов, так и статус для каждого фактического результата. Если фактический результат совпадает с ожидаемым, в графе с фактическим ставится статус passed — тест-кейс успешно пройден, ошибок не обнаружено. Если результат отличается от ожидаемого — статус failed — проверка провалена, полученный результат не соответствует ожидаемому. Во втором случае тестировщик создаёт отчёт о дефекте. К тест-кейсу обязательно добавляется ссылка на дефект, обнаруженный при исполнении.
2. Статус тест-кейса обозначает результат исполнения этого кейса или причину, по которой он не может исполняться. 
Основные статусы:
● passed — успешно пройден
● failed — кейс не прошел проверку, исследуемый объект не соответствует ТЗ
● skipped — пропуск проверки
● blocked — проверка заблокирована
● untested — кейс еще не брали в работу

Кроме того, для некоторых тест-кейсов могут потребоваться дополнительные атрибуты:
● Требования к среде — специальное оборудование, программное обеспечение и т. п. вещи, необходимые для выполнения тест-кейса и не перечисленные в соответствующей спецификации проекта тестирования.
● Специальные процедурные требования — особые процедуры настройки, выполнения или очистки, уникальные для этого тест-кейса.
● Межкейсовые зависимости — тест-кейсы, которые нужно выполнить перед этим тест-кейсом.

Виды тест-кейсов
Тест-кейсы делят на несколько групп в зависимости от входных данных, действий и предполагаемого поведения системы.
1. Позитивные тест-кейсы. Доказывают, что программное обеспечение отвечает всем требованиям: если были введены верные данные, а пользователь следовал указаниям, система реагирует адекватно.
2. Негативные тест-кейсы. Их результаты позволяют убедиться в способности программного обеспечения правильно реагировать на ошибочные вводные или некорректные действия. Это может быть, например, появление всплывающего окна с подсказкой.
3. Деструктивные тест-кейсы. Служат для проверки способности системы выдерживать большие нагрузки и внешние воздействия без утери данных пользователя. Должно соблюдаться условие о запрете разрушения аппаратной части.

Правила написания тест-кейсов.

1. Заголовок - 
● должен быть чётким, кратким, понятным и однозначно характеризующим суть тест-кейса;
● не может содержать выполняемые шаги и ожидаемый результат.
2. Предусловие - 
● может содержать полную информацию о состоянии системы или объекта, необходимом для начала выполнения шагов тест-кейса; 
● может содержать ссылки на информационные источники, которые необходимо изучить перед прохождением тест-кейса (инструкции, описание систем…); 
● не может содержать ссылки на тестируемый ресурс, если у информационной системы более одной среды (прод, тест, препрод…), данная информация должна быть вынесена в инструкцию, и ссылка приложена в предусловии; 
● не может содержать данные для авторизации, данная информация должна быть вынесена в инструкцию, и ссылка приложена в предусловии; 
● не может содержать выполняемые шаги и ожидаемый результат, если нам нужно, чтобы до выполнения шагов проверки у нас была открыта главная страница, то мы в предусловии указываем «открыта главная страница сайта»; 
● не может содержать ожидаемый результат. 
3. Шаги проверки - 
● должны быть чёткими, понятными и последовательными; 
● следует избегать излишней детализации шагов. Правильно: «ввести в поле число 12». Неправильно: «нажать на клавиатуре на цифру ‘1’, следующим шагом нажать на клавиатуре на цифру ‘2’»; 
● должны использоваться безличные глаголы. Правильно: нажать, ввести, перейти. Неправильно: нажмите, введите, идите; 
● не должно быть комментариев и пояснений, если есть необходимость привести мини-инструкцию, то оформляем инструкции в базе-знаний и в предусловии ссылаемся на неё; 
● не должно быть жёстко прописанных статических данных (логины, пароли, имена файлов) и примеров, для исключения эффекта пестицида. 
4. Ожидаемый результат - 
● должен быть у каждого шага проверки; 
● должно быть кратко и понятно описано состояние системы или объекта, наступающее после выполнения соответствующего шага; 
● не должно быть избыточного описания. 
Общие требования к тест-кейсам:
1. язык описания тест-кейсов должен быть понятен широкому кругу пользователей, а не узкой группе лиц; 
2. тест-кейс должен быть максимально независим от других тест-кейсов и не ссылаться на другие тест-кейсы (лучшая практика, когда зависимостей нет вообще); 
3. тест-кейсы группируются в функциональные блоки по их назначению; 
4. в тест-кейсах проверяющих работу функционала скриншотов быть не должно, иначе вы будете посвящать сотни часов на изменение всех скриншотов в тысячах тест-кейсах при изменении интерфейса тестируемой программы. Скриншоты могут быть добавлены только в тест-кейсы проверяющие отображение страниц и форм. 

Плюсы и минусы тест-кейсов.
● Главное достоинство тест-кейса состоит в том, что его может провести практически любой сотрудник компании, не имеющий отношения к работе над проектом. Если к созданию тест-кейса подошли ответственно, исполнитель справится с ним без труда.
● Минусы такого типа тестирования тесно взаимосвязаны. Заполнение требует долгой монотонной работы. Например, при тестировании корректного ввода ФИО надо выполнять простейшие одинаковые шаги: «ввести только символы, «ввести только числа» и т.д. Это особенно заметно, если посмотреть несколько тест-кейсов на один и тот же функционал. Затратное по времени редактирование. Малейшее изменение содержания сайта требует коррекции сотен сценариев тест-кейса. Не самое увлекательное и довольно выматывающее занятие.
Некорректность тест-кейсов. Возникает из-за того, что при создании нового берутся элементы старого, которые не поменяли.

Ошибки в тест-кейсах
1. Заголовка нет или он сформулирован некорректно. Например, из заголовка «Кнопка “Сохранить”» или «Чат с поддержкой» непонятно, что мы проверяем в кейсе. То, что они есть, или их функциональность? Заголовок должен кратко, но чётко описывать суть проверки.
2. Ссылки ведут на разные или недействительные требования. В тест-кейсах можно ссылаться на требования, но если мы используем несколько ссылок, стоит убедиться, что их содержимое актуально и не противоречит друг другу.
3. Используются личные формы глаголов: «нажми», «перейдите», «укажи». В тест-кейсах, как и в чек-листах, следует использовать обезличенные формы глаголов: «нажать», «перейти», «указать».
4. Пунктуационные, орфографические, синтаксические ошибки. Текст с ошибками и опечатками читать сложнее, чем текст, не нарушающий правила языка.
5. «Выдумывание» особенностей поведения приложения без отсылки к требованиям. Тест-кейс должен описывать сценарий и ожидаемые результаты чётко в соответствии с требованиями. Тестировщик ничего не выдумывает.
6. Нет описания приготовления к выполнению тест-кейса, если требуются предусловия. Например, для проверки фишек верифицированного пользователя в соцсети нам нужен такой верифицированный пользователь.
При тестировании у нас есть возможность создать его через админку (не так, как это происходит у обычного пользователя). Нам подойдёт этот вариант, так как мы проверяем не верификацию, а функцию, доступную такому пользователю. Соответственно, верификация пользователя — наше предусловие. В нём обязательно нужно либо сказать, что надо верифицировать пользователя по такой-то ссылке, либо дать конкретные данные для авторизации пользователем.

В итоге, хороший тест-кейс:
● понятен любому члену команды;
● аккуратно и точно написан;
● соответствует требованиям;
● воспроизводим;
● пригоден для многократного использования.
Суть тест-кейсов заключается в том, что они делают процесс тестирования программного обеспечения структурированным и доступным для неспециалистов. В чек-листах прописываются объекты проверки, а в тест-кейсах — пошаговый алгоритм.
Применение данного формата тестирования систем позволяет значительно экономить время на проверках. Гораздо рациональнее один раз потратить время на основательную подготовку набора тест-кейсов, чем каждый раз разрабатывать новое тестирование продукта.
