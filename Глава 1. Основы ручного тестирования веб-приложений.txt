Глава 1. Основы ручного тестирования веб-приложений.
1.1 Веб-приложение как инструмент развития бизнеса
  Ещё 15–20 лет назад нельзя было предположить, что веб-приложения станут неотъемлемой частью жизни. Сегодня эта разновидность онлайн-инструментов используется для различных задач, включая оптимизацию бизнес-процессов, продажу товаров и услуг, распространение информации, общение пользователей друг с другом.
Веб-приложения — незаменимый инструмент маркетинга, который использует все большее количество компаний. Они решают огромное количество сложных задач, помогая автоматизировать ваш бизнес, и упрощают жизнь сотрудникам.
В отличие от стандартных приложений, речь идет о программах, которые способны работать полноценно даже без установки на устройство. Смартфон, планшет или компьютер получает онлайн-доступ к данным, а пользователю не нужно проводить установку в постоянную память — это и есть главная отличительная черта веб-приложений.

  Веб-приложением называют клиент-серверное приложение, которое находится на удаленном сервере. Но в то же время пользовательский интерфейс сервиса отображается в браузере. Именно поэтому в структуре выделяют следующие компоненты:
● клиентская часть — отвечает за действия, выполняемые пользователем;
● серверная часть — отвечает за процессы, происходящие на сервере;
● база данных — структура для упорядоченного хранения информации и доступа к ней.
В зависимости от того, какие задачи ставят перед собой создатели проекта, они используют те или иные средства разработки веб-приложений. Главная задача — обеспечить функциональное взаимодействие между клиентской и серверной частью, доступ к базе данных, корректные возможности по формированию и отправке готовых страниц в ответ на запрос.
Исходя из поставленных задач, разработчики могут создать веб-приложение, к которому удастся получить доступ с любого устройства, или же требовательную среду разработки, для работы с которой подойдут только устройства с определенным уровнем аппаратных возможностей. Могут применяться различные методы разработки веб-приложений, в том числе с открытым доступом к архитектуре, как в «Википедии», или с отсутствием такого доступа для посторонних, как в любом коммерческом или новостном приложении.

 Виды веб-приложений
1. SPA
(Single Page Application)– одностраничное интерактивное приложение. Важно, что оно не только находится на одной странице, но и, подобно полноценной программе, является интерактивным. Так информационный веб-сайт может состоять из одной страницы, но, по существу, не являться SPA. В одностраничном приложении пользователь, переключаясь между вкладками, остается на одной странице. Причем подгружаются и обновляются только нужные части контента, что играет в пользу быстродействия SPA.
Пример одностраничной программы – Gmail. Обратите внимание – когда вы переключаетесь между списками сообщений, адрес страницы не меняется. Это отличительный признак SPA.

2. MPA
MPA (Multi Page Application) – традиционные многостраничные веб-приложения. Когда пользователь взаимодействует с веб-сайтом, загружаются новые HTTP-страницы. Поэтому обмен данными происходит медленней, чем в SPA. Особенно, если есть проблемы с интернет-соединением или с хостингом веб сайта.
Примеры MPA – интернет-магазины, такие как ОЗОН и Wildberries.

3. PWA
Прогрессивное веб-приложение. Разрабатывается с помощью специальных технологий и способно работать без подключения к интернету. Такие приложения доступны на всех устройствах и адаптируются под — любую ширину экрана телефона или компьютера. Их можно устанавливать на главный экран своего смартфона, отправлять уведомления и пользоваться им, как полноценным приложением.

  В случае с каждым проектом создания Веб-приложения совершается определенный цикл действий, в котором можно выделить следующие этапы:
1. Сбор требований и разработка ТЗ. Заказчик озвучивает как основные задачи, так и более глобальные цели, а также дополняет это своими требованиями, чтобы была возможность ознакомить разработчиков с заданием.
2. Прототипирование. Исполнитель создаёт прототип будущего проекта, где отражены будущие блоки и показано, как они будут взаимодействовать в web-среде. Важно выбрать надёжного и опытного исполнителя. Также на данном этапе определяются необходимые технологии разработки.
3. Создание дизайна. Разработчики создают макет внешнего вида, чтобы согласовать его с заказчиком вслед за функциональным прототипом.
4. Верстка и разработка. Теперь команда приступает к созданию страниц в том виде, в каком они должны быть. Здесь происходит два отдельных процесса: с точки зрения backend важно согласовать выполнение функций, а с точки зрения frontend — реакцию визуальных элементов на действия пользователя.
5. Тестирование. Тестировщикам нужно убедиться, что веб-приложение полностью справляется со своими функциями.
6. Документирование. На основе уже готового проекта создается документация, которая будет необходима пользователям, чтобы как можно быстрее освоить всю функциональность проекта.

  С точки зрения коммерции, веб-приложения имеют несколько заметных преимуществ:
1. Безопасность. Минимальный доступ к серверным элементам и базам данных. А значит, меньше всего можно опасаться взлома и других негативных последствий.
2. Доступ с разных устройств. Современные движки позволяют получать доступ к веб-приложению параллельно с разных платформ, например с компьютера или ноутбука на Windows, с мобильных устройств на Android и Apple.
3. Отсутствие клиентского ПО. Не нужно расходовать лишние ресурсы — место и память на установку клиентского ПО на устройство.
4. Масштабируемость — веб-приложение способно справляться с нужным объёмом задач в зависимости от их количества.

  Создание веб-приложения — это на сегодня однозначно один из самых прогрессивных путей инвестирования времени и ресурсов в развитие компании, ведь его внедрение позволяет:
○ автоматизировать бизнес-процессы и для сотрудников, и для персонала;
○ привлечь внимание целевой аудитории и выделиться на фоне конкурентов;
○ сделать решение востребованных задач проще, надежнее и безопаснее.


1.2 Что такое тестирование. Важность ручного тестирования в наше время(10)

  Тестирование программного обеспечения (Software Testing) — проверка соответствия реальных и ожидаемых результатов поведения программы, проводимая на конечном наборе тестов, выбранном определённым образом.
Цель тестирования — проверка соответствия ПО предъявляемым требованиям, обеспечение уверенности в качестве ПО, поиск очевидных ошибок в программном обеспечении, которые должны быть выявлены до того, как их обнаружат пользователи программы.
Тестирование ПО проводится для:
1. для проверки соответствия требованиям;
2. для обнаружения проблем на более ранних этапах разработки и предотвращение повышения стоимости продукта;
3. для обнаружения вариантов использования, которые не были предусмотрены при разработке, а также взгляд на продукт со стороны пользователя;
4. для повышение лояльности к компании и продукту, т.к. любой обнаруженный дефект негативно влияет на доверие пользователей.

    Принципы тестирования
Как определить, что во время тестирования вы придерживаетесь правильной стратегии? Нужно следовать семи принципам тестирования, которые определяет стандарт ISTQB. Они оптимизируют количество и качество работ в QA.
  Принцип 1 — Тестирование демонстрирует наличие дефектов (Testing shows presence of defects).
Тестирование только снижает вероятность наличия дефектов, которые находятся в программном обеспечении, но не гарантирует их отсутствия.
  Принцип 2 — Исчерпывающее тестирование невозможно (Exhaustive testing is impossible).
Полное тестирование с использованием всех входных комбинаций данных, результатов и предусловий физически невыполнимо (исключение — тривиальные случаи).
  Принцип 3 — Раннее тестирование (Early testing).
Следует начинать тестирование на ранних стадиях жизненного цикла разработки ПО, чтобы найти дефекты как можно раньше.
  Принцип 4 — Скопление дефектов (Defects clustering).
Большая часть дефектов находится в ограниченном количестве модулей.
  Принцип 5 — Парадокс пестицида (Pesticide paradox).
Если повторять те же тестовые сценарии снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты.
  Принцип 6 — Тестирование зависит от контекста (Testing is context depending). Тестирование проводится по-разному в зависимости от контекста. Например, программное обеспечение, в котором критически важна безопасность, тестируется иначе, чем новостной портал.
  Принцип 7 — Заблуждение об отсутствии ошибок (Absence-of-errors fallacy). Отсутствие найденных дефектов при тестировании не всегда означает готовность продукта к релизу. Система должна быть удобна пользователю в использовании и удовлетворять его ожиданиям и потребностям.

  Сегодня есть множество фреймворков для тестирования, поддерживающих практически все существующие языки. Казалось бы — можно брать и автоматизировать. Но даже сейчас ручные тесты важны.
  Одно из объяснений их необходимости заключается в том в том, что при ручном тестировании функционала мы можем гораздо быстрее получить информацию о состоянии продукта, который анализируем, о качестве разработки. Кроме того, при автоматизации предварительно разработанные кейсы часто приходится менять и актуализировать, а на написание автотестов требуется определённое время.
  При этом в процессе разработки может прийти обратная связь от заказчика, когда он увидит в готовом продукте какую-то функцию, которую решит изменить до релиза — и, если вы уже подготовили для неё программные тесты, их придётся переписать. Обновление кейсов, автотестов и их проверка отнимут ценное время, которое можно было бы использовать на само обновление этой фичи.
  Всё это означает, что главная цель ручных тестов — предварительно убедиться в том, что заявленный функционал работоспособен, не имеет ошибок и выдаёт ожидаемые, запланированные результаты. Без них нельзя быть уверенным в том, что можно работать дальше. Особенно это актуально для функций, на реализацию которых завязана последующая разработка. В таком случае возня с созданием автотестов на эти фичи становится блокирующим фактором для всей разработки продукта, сдвигая сроки и срывая дедлайны.
  В дополнение к этому, на первых этапах разработки приложения автоматизация может оказаться довольно дорогой. Вам потребуется специалист, обладающий специфической квалификацией (и, возможно, не один). Постоянное поддержание тестов в актуальном состоянии требует затрат ресурсов вплоть до релиза фичи. А месяцы простоя, посвященные вылизыванию автотеста ударят по мотивации команды.
  Если вы хотите регулярно добавлять новый функционал и успевать за действиями конкурентов, то перед тем, как создавать автотесты всегда проверяйте возможности продукта вручную. Просто потому что ручное тестирование ускоряет ваши процессы.
  Автотесты не позволяют проверить удобно ли использовать новые возможности приложения — проверка юзабилити всегда осуществляется вручную.
  В ручных тестах можно импровизировать, создавая безумные сочетания действий, которые никогда не придут в голову пользователю, но могут быть совершены им случайно. Это позволяет создавать новые кейсы.
  Новые кейсы появляются еще и потому, что тестировщик постоянно задает себе вопрос «а что, если?». Так он находит оригинальные способы взаимодействия с приложением — даже если их не было в базовых сценариях.

1.3 Виды тестирования программного продукта. (11)

Тестирование программного продукта с точки зрения классификации по целям должно делиться на два класса:
* Функциональное тестирование
* Нефункциональное тестирование

  Под функциональным тестированием понимается проверка соответствия программного продукта функциональным требованиям, указанным в техническом задании на создание это продукта. Если говорить проще, то при функциональном тестировании проверяется выполняет ли программный продукт все функции, которые должен.
Итак, Вы таки решились провести функциональное тестирование. Вы заглядываете в техническое задание, читаете функциональные требования и понимаете, что по крайней мере они расположены не в том порядке, в каком можно производить тестирование. Вы будете удивлены, что еще достаточно давно другие уже заметили это несоответствие и придумали как его преодолеть.
Для проведения функционального тестирования персоналом отдела технического контроля разрабатывается документ программа и методика испытаний функционала приложения (ПМИ). Документ ПМИ содержит перечень сценариев тестирования программного продукта (test cases) с подробным описанием шагов. Каждый шаг сценария тестирования характеризуется действиями пользователя (специалиста по тестированию) и ожидаемыми результатами – ответной реакции программы на эти действия. Программа и методика испытаний обязана имитировать эксплуатацию программного продукта в реальном режиме. Это означает, что сценарий тестирования должен быть построен на основе анализа операций, которые будут выполнять будущие пользователи системы, а не быть искусственно составленной последовательностью понятных только разработчику манипуляций.

    Виды функционального тестирования.
  По доступу к внутренней структуре ПО:
● Метод черного ящика
● Метод белого ящика
● Метод серого ящика
  Чёрный ящик — это система, внутреннее устройство и механизм работы которой сложны, неизвестны или не важны в рамках решения задачи.
Метод чёрного ящика — метод исследования, при котором вместо свойств и взаимосвязей составных частей системы изучается реакция системы как целого на
изменяющиеся условия.
У чёрного ящика есть «вход» для ввода информации и «выход» для отображения результатов работы. При этом происходящие процессы во время работы системы
наблюдателю неизвестны. Состояние выходов функционально зависит от состояния входов.
Тестирование чёрного ящика (black box testing) — тестирование, основанное на анализе функциональной или нефункциональной спецификации системы без
знания внутренней структуры.
У тестировщика нет доступа к коду, он видит приложение как пользователь. Тестирование проводится через интерфейс приложения. Это ручное тестирование
без знания, что находится «за кулисами» интерфейса.
Тестирование чёрного ящика находит ошибки:
1. Функции неправильно реализуются или их нет.
2. Интерфейс отличается от макетов.
3. Данные не записываются в базы или записываются неверно.
4. Недостаточная производительность системы.
Таким образом, тестировщик концентрируется на том, что программа делает, а не как.
  Преимущества чёрного ящика:
1. Тестирование производится с позиции пользователя, обнаруживает неточности и противоречия в поведении ПО.
2. Тестировщику не обязательно знать языки программирования.
3. Тестирование проводят независимые специалисты, что помогает избежать предвзятого отношения.
4. Тест-кейсы пишутся как только готова спецификация. 
  Недостатки чёрного ящика
1. Тестируется ограниченное количество сценариев.
2. Без чёткой спецификации трудно составить эффективные тест-кейсы.
3. Тесты избыточны, если их уже проверил разработчик на уровне модульного тестирования.
  Метод белого ящика
Тестирование белого ящика (white box testing) основано на анализе внутренней структуры системы, на знании и понимании исходного кода. У тестировщика есть
полный доступ к исходному коду.
Для тестирования методом белого ящика нужно знать язык программирования, на котором написано приложение. Обычно этот вид тестирования применяют
разработчики при написании юнит-тестов. Входные значения отбираются на основе кода, который будет их обрабатывать.
Техника белого ящика применяется на разных уровнях тестирования, но главным образом для модульного тестирования компонентов.
Преимущества:
1. Тестирование производится на ранних этапах: пользовательский интерфейс не требуется.
2. Тестирование более тщательное, с покрытием путей выполнения программы (условий и операторов).
Недостатки:
1. Для тестирования нужны специальные знания. В первую очередь — язык программирования.
  Метод серого ящика
Тестирование серого ящика (gray box testing) — тестирование в условиях, когда часть внутренней структуры программы известна. Тестировщик работает не с
кодом приложения, а с часть его внутренней структуры: проверяет запись в базе данных, лог-файлы, коды ответа от сервера.
Для тестирования веб-приложений методом серого ящика тестировщик использует инструменты разработчика, например, Chrome DevTools.
Техника серого ящика применяется на интеграционном уровне для проверки взаимодействия компонентов программы, например, API-интерфейса и базы данных.
Методы тестирования серого ящика:
1. Матричное тестирование — определение всех переменных, которые есть в программе.
2. Тестирование ортогональных массивов обеспечивает максимальное покрытие кода с минимальным количеством тестов.
3. Pattern Testing выполняется на данных истории предыдущих дефектов системы.

  Связанные с изменениями в коде:
На протяжении всей разработки в код приложения вносят изменения: при добавлении новых функций и при исправлении дефектов. В результате
тестировщик снова проводит тестирование той части приложения, которая уже была проверена, но подверглась изменениям. В зависимости от изменений
выделяют регрессионное и повторное тестирование.
● Повтоное — исполняются тестовые сценарии, выявившие ошибки во время последнего запуска.
Цель — подтвердить, что ошибки исправили, и приложение работает в соответствии с требованиями.
Повторное тестирование — обязательный этап. Тестировщик должен проверить, исправлен ли дефект, повторив сценарий, который выявил ошибку.
● Регрессионное — тестирование уже проверенной функциональности после изменений в коде. 
Цель — убедиться, что эти изменения не добавили или не активизировали ошибки в изменённых областях.

  По запуску кода на исполнение:
● Статическое — тестирование системы на уровне спецификации или реализации без исполнения кода. 
Статическое тестирование проводится для проверки:
○ документации — требований, схем баз данных, тест-кейсов;
○ кода приложения — проверка кода перед запуском специалистом, не участвовавшем в его написании или изменении, то есть аудит кода, или code
review;
○ параметров настройки среды приложения;
○ подготовленных тестовых данных;
○ прототипов пользовательского интерфейса.
Статическое тестирование начинается на ранних этапах жизненного цикла ПО и продолжается на протяжении всей разработки.
● Динамическое — тестирование во время выполнения программного обеспечения, компонента или системы. Проверка —
реальное поведение ПО во время его работы.
Чтобы выполнить динамическое тестирование нужно, чтобы код программы запустился. Тестируется как система в целом, так и отдельные компоненты. Все
виды функционального тестирования — динамические.
  
  По характеру сценария:
Этот подход определяет поведение системы в привычных и экстремальных условиях.
● Позитивное – оценка ожидаемого поведения. Это тестирование проводится в первую очередь, ведь позволяет определить корректность работы программы.
Тестировщик полностью следует требованиям и инструкции по работе с приложением.
● Негативное – определение устойчивости системы в нестандартной ситуации. Например, неожиданный сценарий взаимодействия пользователя с интерфейсом.
Эти типы тестирования нередко проводятся параллельно. Ведь работая над некоторой функциональностью, тестировщику проще оценить её поведение и в стандартных, и в нестандартных условиях.
  
  По исполнителю:
От объекта тестирования движемся к его субъекту. Вы могли слышать об альфа- и бета-тестировании. А поучаствовать в одном из них можно, даже не будучи тестировщиком. 
Итак, по исполнителю тестирование делится на:
● Альфа-тестирование - проверка программного продукта на поздней стадии разработки. Проводится разработчиками или тестировщиками, иногда — с частичным
привлечением пользователей.
Альфа-тестирование проводится после модульного, интеграционного и системного тестирования, когда продукт уже частично готов к выпуску на рынок, но нужно его
доработать. Представляет собой имитацию реального использования, но выполняется либо командой тестирования, либо другими сотрудниками
компании-разработчика в тестовой среде. Например, на тестовых стендах, недоступных внешним пользователям.
После внутреннего альфа-тестирования выпускают бета-версию продукта и передают её на внешнее (публичное) бета-тестирование.
● Бета-тестирование – оценка ПО перед выходом на рынок в фокус-группе или добровольцами. Отзывы собираются, анализируются и учитываются при внесении правок.
Продукт должен быть стабилен, но не исключено появление проблем и выявление недостатков. Поэтому сначала доступ открывают для небольшой группы лояльных
пользователей, чтобы проверить работоспособность и получить обратную связь.
Иногда бета-версия размещается в конкретной стране или регионе, чтобы собрать статистику или получить обратную связь прежде, чем полность вывести продукт на
рынок.

  По наличию тест-кейсов:

● На основе тест-кейсов — формализованный подход, при котором тестирование проводится на основе заранее подготовленных тест-кейсов. Часто используется на проектах по
разработке ПО, так как позволяет структурировать процесс тестирования и сделать его контролируемым.
● Исследовательское тестирование - применяется в быстрорастущих проектах с гибкими методиками разработки, где нет четкой документации и требований. 
Исследовательское тестирование - высший пилотаж в тестирование программного обеспечения. Качественное тестирование доступно специалистам с высшей квалификацией и практически полностью зависит от исполнителя, его опыта, знаний (как в предметной области, так и в методоиках тестирования), способности быстро проникать в суть.
Во время исследовательского тестирования неформальные (не созданные заранее) тестовые сценарии разрабатываются, выполняются, анализируются и оцениваются
динамически. Результаты тестирования используют для изучения компонента или системы и последующей разработки тестовых сценариев для непокрытых областей.
Исследовательское тестирование проводится сессиями. Сессия — это выделенный промежуток времени, в котором тестировщик исследует программу, ориентируясь
на поставленную цель. Например, требуется проверить все поля ввода на странице. Во время сессии ведётся протокол, а тестировщик фиксирует действия и результаты.

  По уровню проводимого тестирования:
Это определяет объект тестирования.
● Компонентное (модульное или юнит-тестирование) тестирование. Тестирование отдельных компонентов программного продукта, сфокусированное на их специфике, назначении и функциональных особенностях.
● Интеграционное тестирование. Если в вашем проекте более одной компоненты, он нуждается в интеграционном тестировании. 
Данный вид тестирования проводится после компонентного тестирования и направлен на выявление дефектов взаимодействия различных подсистем на уровне потоков управления и обмена данными.
Поэтому очень важно учитывать опыт компонентного тестирования, при этом соблюдая бизнес-ориентацию тест-кейсов.
● Системное – проверка работы приложения целиком.
● Приёмочное – оценка соответствия заявленным требованиям к программному продукту.

  По уровню функционального тестирования:
● Smoke-тестирование
Smoke-тестирование или Дымовое тестирование – предварительная проверка самой важной функциональности программного продукта.
Почему дымовое тестирование так называется, есть несколько версий. Наиболее правдоподобная версия: термин инженеров-электротехников. Когда на электрическую цепь впервые подавалось питание, она могла дымиться если пайка была небрежной, или если в устройстве были дефекты.
Дымовые тесты обычно запускаются после сборки, чтобы убедиться, что приложение может быть запущено и работают самые основные функции, прежде чем будет выполнено более всестороннее тестирование.
  Дымовое тестирование может быть как ручным, так и автоматизированным.
Ручное смок-тестирование — это процесс проверки ключевых функций на явные дефекты. Чаще всего этим и ограничиваются, особенно если приложение небольшое.
Автоматизированное смок-тестирование — пишутся скрипты, проверяющие ключевые функции. Иногда это бывает целесообразно, если действия стандартные и повторяемые.
Может быть и гибридное тестирование: сочетание ручного и автоматизированного.
Этапы дымового теста могут варьироваться в зависимости от конкретного приложения и целей теста, но обычно включают следующее:
○ Проверка сборки: убедитесь, что сборка завершена и может быть установлена в целевой среде.
○ Настройка среды: убедитесь, что тестовая среда настроена правильно и соответствует необходимым требованиям.
○ Выполнение теста: запустите наиболее важные и часто используемые функции приложения, чтобы определить, работают ли они должным образом.
○ Оценка результатов испытаний: проанализируйте результаты дымовых испытаний и определите, произошли ли какие-либо сбои.
○ Отчет о дефектах: задокументируйте любые сбои или дефекты, обнаруженные во время дымового теста.
○ Очистка: удалите все временные файлы и восстановите тестовую среду до исходного состояния.
Таким образом, Smoke-тестирование или проверка сборки проводится для того, чтобы до запуска продукта убедиться, что всё работает стабильно и отвечает требованиям заказчика. Оно проводится при каждой новой сборке. У дымового тестирования много преимуществ: оно помогает заметить дефекты на раннем этапе, повысить качество системы и экономит время команды.
● Тестирование критического пути (critical path) — направлено для проверки функциональности, используемой обычными пользователями во время их повседневной деятельности.
● Расширенное тестирование (extended) — направлено на исследование всей заявленной в требованиях функциональности.


  Нефункциональное тестирование оценивает такие качества программного продукта, как, например, эргономику или производительность.
Думаю, важность данного вида тестирования понятна и не требует обоснования. Ведь всем понятно, что если, к примеру, производительность системы не достаточна, то пользователям придется по пол дня ждать отклика на свои действия, что может привести к их массовой спячке.
Как следует из названия, при нефункциональном тестировании проверяется соответствие программного продукта нефункциональным требованиям из технического задания на его создание. И, как в случае с функциональным тестированием, для нефункционально разрабатывается программа и методика испытаний.

    Виды нефункционального тестирования.
● Тестирование производительности:
  ○ Нагрузочное тестирование
  ○ Тестирование масштабируемости
  ○ Объемное тестирование
  ○ Стрессовое тестирование
Тестирование производительности помогает определить работоспособность, стабильность, потребление ресурсов в условиях разных сценариев использования и нагрузок.
Задача системы — обрабатывать нужное количество данных за установленное время. В случае превышения запланированных объёмов входных данных, система восстанавливается после отказа без потери данных.
  Нагрузочное тестирование - процесс анализа производительности тестируемой системы под воздействием нагрузок. Цель нагрузочного тестирования- определить способность приложения к внешним нагрузкам. Обычно испытания проводятся в несколько этапов.
1. Генерация тестовых сценариев
Для эффективного анализа сценарии должны быть наиболее близки к реальным сценариям использования. Важно понимать, что всегда возможны исключения, и даже самый подробный план тестирования может не покрыть отдельно взятого случая.
2. Разработка тестовой конфигурации
Имея сценарии тестирования, важно распределить порядок возрастания нагрузки. Для успешного анализа необходимо выделить критерии оценки производительности (скорость отклика, время обработки запроса и т.д.).
3. Проведение тестового испытания
При проведении тестов важно своевременно следить за исполнением сценариев и откликом тестируемой системы. Для эмуляции высоких нагрузок требуется серьезная аппаратная и программная инфраструктура. В некоторых случаях для удешевления работ применяются методы математического моделирования. За основу берутся данные, полученные при низких нагрузках, и аппроксимируются. Чем выше уровень моделируемой нагрузки, тем ниже точность оценки. Однако подобный способ существенно сокращает расходы.
  Тестирование масштабируемости — тестирование для измерения возможностей вертикального и горизонтального масштабирования с точки зрения любой из нефункциональных возможностей: увеличение количества
пользователей, рост количества транзакций, увеличение объёма данных.
Вертикальное масштабирование — это увеличение производительности каждого компонента системы для повышения общей производительности. Например, увеличивается объём оперативной памяти на сервере, чтобы он быстрее
обрабатывал запросы. Это повысит производительность всей системы.
Горизонтальное масштабирование — разбиение системы на структурные компоненты и разнесение их по отдельным физическим машинам. А также увеличение количества серверов, параллельно выполняющих одну и ту же
функцию. Например, увеличивается количество серверов, но каждый выполняет одну и ту же задачу: принимает одни и те же запросы и отвечает на них. Если разработчики заранее не подумают, как они увеличат ресурсы при росте популярности, они потеряют значительную часть прибыли.
  Объёмное тестирование — тестирование на больших объёмах данных. Например, тестируется поведение приложения при попытке загрузить в его базу данных нескольких файлов очень большого размера.
  Стресс тестирование. У любой системы есть предел нормального функционирования. При превышении предела система попадает в состояние стресса и значительно меняет свое поведение. Стресс тестирование проверяет работу приложения в условиях превышения пределов нормального функционирования. Особенно это важно для "критичных" программ: банковского ПО, программ авиационной отрасли, медицины. Стресс тестирование проводят не только на стадии разработки программного обеспечения, но и на протяжении всего цикла функционирования с целью получения и обработки данных поведения системы за долгий период времени.

● Инсталляционное тестирование
Оценка вероятности возникновения проблем при установке, удалении, а также обновлении ПО при различном программном и аппаратном окружении. Оно позволяет оценить работоспособность системы после завершения работы инсталлятора.
● Тестирование пользовательского интерфейса (GUI/UI-тестирование).
Удобство пользователя при взаимодействии с разными параметрами интерфейса (кнопки, цвета, выравнивание и т. д.).
Проверка соответствия интерфейса и требований, насколько удобно пользователям работать с программным продуктом. Проверяют, ведёт ли себя программное обеспечение в соответствии со спецификацией, когда пользователь взаимодействует с ним с помощью клавиатуры и мыши (когда тестируется десктопное приложение), или с помощью сенсорного экрана, жестов или движений устройства (когда тестируется мобильное приложение).
● Тестирование UX (юзабилити) – правильность логики использования программного продукта.
Любое приложение создается для того, чтобы им воспользовались. Удобство использования - важный качественный показатель программы. IT индустрия знает множество примеров, когда проекты взлетали после удачного исправления удобства использования. Чем шире аудитория, тем важнее фактор юзабилити. Тестирование юзабилити включает в себя детальный анализ поведения пользователей. Для оценки эргономики важно иметь данные не только о скорости выполнения бизнес-задачи, но и об эмоциях пользователя, мимике лица, тембра голоса.
Результат грамотного UX-тестирования — перечень рекомендаций: что и как изменить, чтобы повысить количество конверсий и превратить посетителей сайта в постоянных и преданных пользователей
● Тестирование локализации
Оценка правильности версии программного продукта (в т.ч. языковой и культурный аспекты).
● Тестирование безопасности
Определение уровня безопасности ПО: защищено ли оно от атак хакеров, несанкционированного доступа к данным и т. д.
Основные понятия, которые охватывает тестирование: конфиденциальность, целостность и сохранность данных, аутентификация, авторизация и невозможность отказа от авторства (атрибуты качества). Проводится для тех объектов, в работе которых обеспечение защищённости — одна из важнейших задач.
● Тестирование надежности
Тестирование работы программы при длительной средней ожидаемой нагрузке.
Неважно, как долго идёт это тестирование, основная задача — наблюдая за потреблением ресурсов в течение определённого времени, выявить утечки памяти и проследить, чтобы скорость обработки данных или время отклика в начале теста и с течением времени не уменьшалась. Иначе вероятны сбои в работе продукта и перезагрузки системы.
● Конфигурационное тестирование
Включает в себя кроссбраузерное и кроссплатформенное тестирование. Такое тестирование дает уверенность, что приложение заработает на разных платформах (на разных операционных системах, либо на разных видах устройств: десктоп, мобильный, планшет) и в разных браузерах, а значит у максимального числа пользователей.
