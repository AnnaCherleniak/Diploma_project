Глава 1. Основы ручного тестирования веб-приложений.
1.1 Веб-приложение как инструмент развития бизнеса

1.2 Что такое тестирование. Важность ручного тестирования в наше время(10)
  Сегодня есть множество фреймворков для тестирования, поддерживающих практически все существующие языки. Казалось бы — можно брать и автоматизировать. Но даже сейчас ручные тесты важны.
  Одно из объяснений их необходимости заключается в том в том, что при ручном тестировании функционала мы можем гораздо быстрее получить информацию о состоянии продукта, который анализируем, о качестве разработки. Кроме того, при автоматизации предварительно разработанные кейсы часто приходится менять и актуализировать, а на написание автотестов требуется определённое время.
  При этом в процессе разработки может прийти обратная связь от заказчика, когда он увидит в готовом продукте какую-то функцию, которую решит изменить до релиза — и, если вы уже подготовили для неё программные тесты, их придётся переписать. Обновление кейсов, автотестов и их проверка отнимут ценное время, которое можно было бы использовать на само обновление этой фичи.
  Всё это означает, что главная цель ручных тестов — предварительно убедиться в том, что заявленный функционал работоспособен, не имеет ошибок и выдаёт ожидаемые, запланированные результаты. Без них нельзя быть уверенным в том, что можно работать дальше. Особенно это актуально для функций, на реализацию которых завязана последующая разработка. В таком случае возня с созданием автотестов на эти фичи становится блокирующим фактором для всей разработки продукта, сдвигая сроки и срывая дедлайны.
  В дополнение к этому, на первых этапах разработки приложения автоматизация может оказаться довольно дорогой. Вам потребуется специалист, обладающий специфической квалификацией (и, возможно, не один). Постоянное поддержание тестов в актуальном состоянии требует затрат ресурсов вплоть до релиза фичи. А месяцы простоя, посвященные вылизыванию автотеста ударят по мотивации команды.
  Если вы хотите регулярно добавлять новый функционал и успевать за действиями конкурентов, то перед тем, как создавать автотесты всегда проверяйте возможности продукта вручную. Просто потому что ручное тестирование ускоряет ваши процессы.
  Автотесты не позволяют проверить удобно ли использовать новые возможности приложения — проверка юзабилити всегда осуществляется вручную.
  В ручных тестах можно импровизировать, создавая безумные сочетания действий, которые никогда не придут в голову пользователю, но могут быть совершены им случайно. Это позволяет создавать новые кейсы.
  Новые кейсы появляются еще и потому, что тестировщик постоянно задает себе вопрос «а что, если?». Так он находит оригинальные способы взаимодействия с приложением — даже если их не было в базовых сценариях.

1.3 Виды тестирования программного продукта. (11)

Тестирование программного продукта с точки зрения классификации по целям должно делиться на два класса:
* Функциональное тестирование
* Нефункциональное тестирование

  Под функциональным тестированием понимается проверка соответствия программного продукта функциональным требованиям, указанным в техническом задании на создание это продукта. Если говорить проще, то при функциональном тестировании проверяется выполняет ли программный продукт все функции, которые должен.
Итак, Вы таки решились провести функциональное тестирование. Вы заглядываете в техническое задание, читаете функциональные требования и понимаете, что по крайней мере они расположены не в том порядке, в каком можно производить тестирование. Вы будете удивлены, что еще достаточно давно другие уже заметили это несоответствие и придумали как его преодолеть.
Для проведения функционального тестирования персоналом отдела технического контроля разрабатывается документ программа и методика испытаний функционала приложения (ПМИ). Документ ПМИ содержит перечень сценариев тестирования программного продукта (test cases) с подробным описанием шагов. Каждый шаг сценария тестирования характеризуется действиями пользователя (специалиста по тестированию) и ожидаемыми результатами – ответной реакции программы на эти действия. Программа и методика испытаний обязана имитировать эксплуатацию программного продукта в реальном режиме. Это означает, что сценарий тестирования должен быть построен на основе анализа операций, которые будут выполнять будущие пользователи системы, а не быть искусственно составленной последовательностью понятных только разработчику манипуляций.

    Виды функционального тестирования.
  По доступу к внутренней структуре ПО:
● Метод черного ящика
● Метод белого ящика
● Метод серого ящика
  Чёрный ящик — это система, внутреннее устройство и механизм работы которой сложны, неизвестны или не важны в рамках решения задачи.
Метод чёрного ящика — метод исследования, при котором вместо свойств и взаимосвязей составных частей системы изучается реакция системы как целого на
изменяющиеся условия.
У чёрного ящика есть «вход» для ввода информации и «выход» для отображения результатов работы. При этом происходящие процессы во время работы системы
наблюдателю неизвестны. Состояние выходов функционально зависит от состояния входов.
Тестирование чёрного ящика (black box testing) — тестирование, основанное на анализе функциональной или нефункциональной спецификации системы без
знания внутренней структуры.
  Связанные с изменениями в коде:
● Повтоное
● Регрессионное
  По запуску кода на исполнение:
● Статическое
● Динамическое
  По характеру сценария:
● Позитивное
● Негативное
  По исполнителю:
● Альфа-тестирование
● Бета-тестирование
  По наличию тест-кейсов:
● На основе тест-кейсов
● Исследовательское тестирование
  По уровню проводимого тестирования:
● Компонентное (модульное или юнит-тестирование) тестирование. Тестирование отдельных компонентов программного продукта, сфокусированное на их специфике, назначении и функциональных особенностях.
● Интеграционное тестирование. Данный вид тестирования проводится после компонентного тестирования и направлен на выявление дефектов взаимодействия различных подсистем на уровне потоков управления и обмена данными.
● Системное – проверка работы приложения целиком.
● Приёмочное – оценка соответствия заявленным требованиям к программному продукту.


  Нефункциональное тестирование оценивает такие качества программного продукта, как, например, эргономику или производительность.
Думаю, важность данного вида тестирования понятна и не требует обоснования. Ведь всем понятно, что если, к примеру, производительность системы не достаточна, то пользователям придется по пол дня ждать отклика на свои действия, что может привести к их массовой спячке.
Как следует из названия, при нефункциональном тестировании проверяется соответствие программного продукта нефункциональным требованиям из технического задания на его создание. И, как в случае с функциональным тестированием, для нефункционально разрабатывается программа и методика испытаний.

    Виды нефункционального тестирования.
● Тестирование производительности:
  ○ Нагрузочное тестирование
  ○ Тестирование масштабируемости
  ○ Объемное тестирование
  ○ Стрессовое тестирование
● Инсталляционное тестирование
● Тестирование интерфейса
● Тестирование юзабилити
● Тестирование локализации
● Тестирование безопасности
● Тестирование надежности
● Конфигурационное тестирование

