2.1 Особенности Исследовательского тестирования

Исследовательское тестирование – это одновременное изучение программы, проектирование и выполнение тестов. Этот подход — противоположность сценарного, когда список проверок составлен до проведения тестирования. Исследовательские тесты не определены заранее и не выполняются в точном соответствии с планом. Исследовательское тестирование — это не методика тестирования. Это подход или образ мыслей, который можно применить к любой методике. Исследовательское тестирование не должно выполняться небрежно, в спешке. Такой подход требует тщательной подготовки, а знания и умения тестировщика — важная форма этой подготовки. Исследовательское тестирование может проводиться как вручную, так и со вспомогательными инструментами.

Когда применять исследовательское тестирование?
● Нужна быстрая обратная связь о новом продукте.
● Нужно быстро изучить продукт.
● Сценарное тестирование не находит баги, требует разнообразия.
● Нужно принять решение о необходимости покрытия области сценарными тестами.
● Требований нет, они неполные или устарели.
● Продукт маленький, разработка тестовых сценариев займёт больше времени, чем сам процесс тестирования.

Преимущества исследовательского тестирования
1. Нестандартные ходы выявляют нестандартные дефекты.
2. Не тратится время на описание всех сценариев.
3. Не нужна поддержка тестовых сценариев.
4. Не наступает «эффект пестицида».
5. Можно тестировать без требований.
6. Тесты могут стать интереснее и креативнее.

Ограничения для исследовательского тестирования
Чистое исследовательское тестирование хорошо работает на небольших краткосрочных проектах или на начальных этапах жизни продукта. В первом случае объёмная тестовая документация может не оправдать времени, затраченного на её написание. Во втором — требования могут быть очень размытыми, так как нет определённости, в каком направлении будет двигаться разработка. Функциональность будет меняться, так что потребуется постоянная актуализация тест-кейсов.

    Жизненный цикл исследовательского тестирования
    
В процессе исследовательского тестирования большое внимание уделяется свободе тестировщика, но при этом соблюдается определенная структура.
Основными тремя этапами этого подхода являются:

    Этап 1: Обучение
 
Тестировщики начинают с глубокого понимания программного обеспечения и его функциональности — критического анализа, чтобы определить, как оно сочетается друг с другом.
Это позволяет тестировщику выяснить, какие обычные вводы может сделать пользователь, хотя он, возможно, уже знаком с приложением и его функционированием.
На этапе обучения может даже потребоваться учебник по работе с программным обеспечением. Это этап исследования, на котором тестировщик получает всю необходимую информацию для разработки широкого спектра полезных тестов.

    Этап 2: Разработка тестов
 
Разработка исследовательских тестов действительно включает в себя различные правила и параметры, но все же предлагает значительно больше свободы по сравнению со сценарным тестированием, специфика которого уже известна до начала тестирования.
Тестировщик может разработать проверки, которые, по его мнению, более точно соответствуют приложению, и потенциально может обнаружить ценные данные для команды разработчиков, включая заметные ошибки, которые они должны исправить.
Команды тестирования используют этот этап, чтобы определить, какого подхода придерживаться и как распределить работу между различными тестировщиками таким образом, чтобы использовать их сильные стороны.

    Этап 3: Исполнение
 
После разработки используемых проверок, тестировщики теперь могут проверять приложение теми способами, которые они считают наиболее эффективными — они могут проводить их сразу после разработки конкретной проверки.
Это этап, на котором тестировщики активно ищут проблемы и то, как обнаруженные ими проблемы могут быть использованы в других функциях и возможностях.
Хотя при проведении исследовательских тестов в определенной степени присутствует интуиция, они все же следуют установленным процессам и целям, что позволяет проводить плавное тестирование, которое легко может соответствовать конкретным целям тестирования.

    Виды исследовательского тестирования
 
Три основных типа исследовательского тестирования, которые может использовать команда, это:

1. Вольное исследовательское тестирование
Вольное тестирование — это специальный подход к проверке приложения. При этом учитывается мало правил, поэтому его эффективность может варьироваться; некоторые программы и компоненты требуют более надежной методики.
Эти проверки могут принести много пользы, помогая тестировщикам ознакомиться с данным приложением и подтвердить работу предыдущего тестировщика.
Даже при отсутствии строгих правил опытные и квалифицированные тестировщики могут легко использовать это в своих интересах. Они могут с легкостью перемещаться по всем аспектам программного обеспечения — в некоторых ситуациях правила тестирования являются ограничительными и могут непреднамеренно ограничить результаты команды.

2. Исследовательское тестирование на основе сценариев
Тестирование на основе сценариев использует реалистичные ситуации в качестве основы для каждого теста, например, проверяя вводы, которые пользователи, скорее всего, сделают во время типичной работы данного программного обеспечения.
Тестировщики усердно работают над тем, чтобы каждый разработанный ими сценарий соответствовал тому, как пользователь взаимодействует с приложением.
Время может стать ограничением, поскольку цель команды — протестировать как можно больше сценариев; в зависимости от предстоящих сроков, скорее всего, не удастся охватить все возможности.
Тестировщики должны использовать широкий спектр тестов по различным категориям.

3. Исследовательское тестирование на основе стратегии
Тестирование на основе стратегии включает в себя широкий спектр специальных методов, в том числе тестирование граничной стоимости, методы эквивалентности, методы, основанные на риске, и многое другое. В этом случае предпочтение обычно отдается тестировщикам, которые уже знакомы с приложением, поскольку они могут разработать индивидуальные стратегии, включающие эти отдельные методы.
Подход, основанный на стратегии, фокусируется в основном на функциональности (и внутренней работе) программного обеспечения, не рассматривая возможные сценарии, которые могут привести пользователя к возникновению проблем. Это может привести к более широкому анализу приложения и его различных особенностей, потенциально более глубокому, чем при различных других подходах.

    Как организовать исследовательское тестирование?

  Для управления исследовательским тестированием может использоваться Session-Based Test Management. В основе этой модели лежат:
● Тестовые сессии – ограниченные промежутки времени, в рамках которых происходит тестирование‎. При этом каждая сессия имеет тему.
● Отчеты по результатам сессий, оформленные в пригодной для парсинга и сбора статистики форме.
● Обсуждение лидом и тестировщиком результатов проведенной сессии.
 
  Идея туров в исследовательском тестировании

Чтобы систематизировать исследовательское тестирование можно использовать идею туров.  Туры – это идеи и инструкции по исследованию программного продукта, объединенные определённой общей темой или целью. Туры, как правило, ограничены по времени – длительность тестовой сессии не должна превышать 4 часа.


2.1.1 Идея туров в исследовательском тестировании. Туры Джеймса Виттакера.(12)

Джеймс Виттакер, хоть и не придумал саму идею туров, но предложил свой подход к исследовательскому тестированию с использованием туров и в своей книге “Exploratory Software Testing” в доступной форме озвучил идею туров и описал сами туры.
Тур – это своего рода план тестирования, он отражает основные цели и задачи, на которых будет сконцентрировано внимание тестировщика во время сессии исследовательского тестирования. При этом Виттакер использует метафору, что тестировщик – это турист, а тестируемое приложение – это город. Обычно у туриста (тестировщика) мало времени, поэтому он выполняет конкретную задачу в рамках выбранного тура, ни на что другое не отвлекаясь. Город (ПО) разбит на  районы: бизнес-районы, исторический район, район развлечений, туристический район, район отелей, захудалый район.

Туры
1. Туры по бизнес-центру (Tours of the Business District)

    Это места, где «делается бизнес». Они начинаются с запуска кода и до завершения его работы. В них расположены функции, ради которых пользователи и используют данное приложение. Это «задняя стенка коробки», которая является главной при демонстрации коммерческой ценности продукта, а также код, который это поддерживает.

  Тур по путеводителю (Guidebook Tour)
    Путеводители часто содержат много информации о местах, которые можно посмотреть. Они рассказывают о лучших отелях, торговых комплексах и привлекательных местах без подробных деталей. Эксперты, посетившие эти места, любезно скажут туристам, как именно нужно наслаждаться этими местами. Здесь должно быть красиво, чисто, безопасно, чтобы туристы могли спокойно тратить свои деньги. Это очень важные места, и они должны быть включены в тестовую стратегию исследовательского тестирования. Мы должны заботиться о том, чтобы пользователи получали пользу и удовольствие от работы здесь.
    Вариантом такого тура является строгое следование руководству пользователя, предоставленное (если предоставлено) производителем, в котором даны описания ключевых функций. Цель в том, чтобы пройти все сценарии, которые описаны в руководстве пользователя, так полно, как это возможно. Зачастую здесь можно найти различные советы по входным данным и навигации по интерфейсу в процессе использования функций. Помимо самой функциональности этот тур позволяет проверить и то, насколько точно и аккуратно составлено руководство пользователя.
    Разновидностями тура также являются тур блоггера, который содержит советы третьей стороны, а также тур эксперта, который рассматривает отзывы неудовлетворенных пользователей. Этому могут помочь различные форумы, новости, сообщества или даже книги (в случае, если приложение большое). Еще один полезный тур – тур конкурента, который позволяет рассмотреть приложение со стороны конкурирующей системы.
    Вышеуказанные варианты тура по путеводителю позволяют оценить приложение в разрезе его разрекламированных функций. Это незамысловатые тесты, и любое отклонение от руководства должны воспринимать как ошибка. Указанный тур позволяет нам использовать функции именно в такой последовательности и взаимосвязи, в какой это будут делать сами пользователи.
    Типичные баги:
● Несоответствия описанных шагов в справке работе приложения
● Несоответствия скриншотов в справке и самого приложения
● Ошибки (от орфографических до логических) в справке
● Ошибки удобства использования справки: длинная или короткая, непонятная или примитивная, не отвечающая на те вопросы, которые предполагают прочитать пользователи
● Ошибки удобства использования приложения

  Денежный тур (Money Tour)
Каждое приложение имеет функциональность, которая, в глазах пользователя (заказчика), принесет им деньги. «Это самое привлекательно для меня» — скажет в этом случае пользователь. «Денежная» функциональность несет с собой «денежную силу». Сюда входят различные нюансы использования продукта, поскольку именно они позволяют зарабатывать деньги. Специалисты по продажам могут направлять демонстрацию продукта в сторону указанных сценариев, затрагивая то, что не было четко зафиксировано в документации к продукту. Такое «продажное видение» – отличная основа для денежного тура.
    В указанном туре важно услышать то, как специалисты по продажам преподносят продукт, и пройтись именно по тому, на чем ставится акцент. Во время подобного тестирования вы не только находите ошибки, но и сохраняете видение «денежной жилы» приложения.
    Разновидность денежного тура – тур скептически настроенного заказчика. Проходясь по туру, вы внезапно останавливаетесь и спрашиваете: «А что, если я сделаю вот так?» или «А как мне сделать это?». «А что, если я сейчас дополню проход такими сценариями, которые выходят за рамки изначально задуманных? Возьму да включу сюда еще парочку фич!».
    Типичные баги:
● Напрочь отсутствие в приложении некоторых описанных в промо-материалах возможностей
● Несоответствие информации в рекламных материалах и работы самого приложения
● Функциональные ошибки в работе приложения, влияющие на демонстрацию
● Устаревшие скриншоты приложений
● Лингвистические ошибки (от орфографических до логических)

  Тур по отметкам (Landmark Tour)
    Мы выбираем какие-либо ориентиры и осуществляем скачок к одному из них через все приложение. Например, мы выбираем ключевую функцию в качестве отметки, которую мы определили в туре по путеводителю или в денежном туре. Далее мы составляем набор из таких отметок, определяем их порядок и исследуем приложение от отметки к отметке, пока не достигнем каждой из них. Далее можно создать карту покрытия отметками. Разный порядок, разные отметки – вот поле для вариативности подобного тура.
    Типичные баги: блокирующие, критические проблемы в работе приложения.

  Интеллектуальный тур (The Intellectual Tour)
Задавайте приложению сложные, интеллектуальные вопросы. Как можно заставить работать приложение так тяжело, как это возможно? Какие фичи приблизят его к собственному лимиту? Какой ввод и входные данные заставят его напрягаться? Какие данные могут обмануть процедуры проверки ошибок? Очевидно, это напрямую зависит от особенностей конкретного приложения.
    Вариант – тур наглого американца, который использует стереотипы об иностранцах. Задавай глупые вопросы, старайся насолить, привлекай к себе внимание. Придумывайте препятствия и посмотрите, как с ними справится приложение. Имеет ли это смысл? Возможно и нет. Но ведь мы можем так сделать.
    Интеллектуальный тур и его варианты могут помочь найти как действительно сложные и приоритетные ошибки, так и глупые ошибки. Нужно уметь различать их. Для этого необходимо создавать реальные случаи, чтобы в будущем было легче аргументировать то, что это важно и это нужно исправлять.
    А именно, при работе приложения задумываться о сложных, но реалистичных сценариях, обычно связанных с объемом данных, скоростью выполнения операции, осознанном вызове ошибок:
● в проигрывателе прослушать аудиофайл длительностью в 10 часов
● в текстовом редакторе создать объемный файл
● указать длинное имя файла
● при работе мобильного приложения вызывать телефонный звонок
● выполнять какое-то действие очень быстро
● на форме заполнить все поля ошибочными данными
    Типичные баги:
● Креши приложения при выходе за граничные значения
● Автоматические прерывания текущих процессов, изменение состояние приложения
● Недоработки в логике
● Низкая производительность, медленная работа приложения
● Потеря данных
● Примитивные ошибки в удобстве использования (например, в файловом менеджере мало места отведено под название документа и нет возможности его просмотреть другим способом)

  Тур службы доставки (FedEx)
    Думайте о данных, которые должны проходить через приложение. Данные начинают свой путь с ввода, далее хранятся во внутренних хранилищах и переменных, где часто происходит их обработка и изменение, а далее они могут подвергаться вычислениям. В конце большинство из таких данных предоставляются пользователю или куда-либо еще.
    Нужно концентрироваться на данных. Нужно определить сохраненные данные и «проследить» их путь через приложение. Вот ввели вы, к примеру, адрес своей почты. А где он отображается? В каких местах? Попробуйте найти все области, с которыми соприкасаются данные. Определите весь их жизненный цикл.
    Типичные баги: совершенно разные – от критических функциональных до багов в удобстве использования, интерфейсе, локализации (поддержка форматов разных стран).
  
    Тур «после работы», внеурочный тур (The After-Hours Tour)
    После денежной активности приложения, оно все еще продолжает работу. Это поддержка задач, архивация данных и файлов. Это может быть автоматическим процессом, но его также можно выполнять принудительно. Данный тур напоминает нам делать это.
    То, что пользователь перестает использовать приложение, не обозначает, что приложение останавливает работу. Часто приложение бэкапит данные, архивирует, получает обновления и т.д. Тестировщик должен проследить за этими операциями.
    Типичные баги:
● проблемы неэффективного использования ресурсов (нерациональное использование трафика, места на диске, процессора, утечки памяти и т.п.)
● функциональные ошибки иногда приводящие к остановке работы приложения

  Тур уборщика (The Garbage Collector’s Tour)
    Для тестировщика этот тур похож на выборочную проверку, в процессе которой он по кратчайшему пути должен методично переходить с экрана на экран, вызывать диалог за диалогом и проверять какую-то простую примитивную вещь, не углубляясь особо в детали. Например, наличие и правильность заголовков на всех окнах, зеленый цвет кнопки сохранения везде, где она есть, наличие метки с количеством комментариев к статье везде, где эта статья как-то упоминается и т.д.
Указанный тур включает выбор цели (все меню, ошибки, диалоговые окна, к примеру) и посещение каждой из них наиболее коротким путем.


2. Туры по историческому району (Tours Through the Historical District)

    Это излюбленные туристами исторические места, места, окруженные историей. Сюда включены места, связанные с предыдущей версий, со старым функционалом или кодом, которые исторически содержали большое количество ошибок. Его использование и изменение подразумевает большое количество предположений. Именно на этом компоненте и сосредотачивается данный тур.

    Тур по нерекомендуемым местам (The Bad-Neighborhood Tour)
В приложении – это фичи или места в коде с наибольшим скоплением багов. Про эти места вы можете знать интуитивно, а можете воспользоваться багтрекером. Как только вы нашли один баг, знайте, что, скорее всего, рядом есть и другой; он может находиться в том же функционале, а может и в соседнем. Задача тестировщика состоит в том, чтобы пройти по местам. Связано это с тем, что баги имеют свойство скапливаться в одном месте.
    Тур также применим и после исправления багов. Пройдитесь взаимосвязанным областям.
    Типичные баги: функциональные.

    Музейный тур (The Museum Tour)
Код тоже может быть “античным”. Это тот код, который давно не изменялся. Такой код, попадая в новую среду, может вообще не работать, или, подвергаясь внешнее ревизии, может оказаться непригодным. Тестировщики могут найти такой код по метке даты изменения в репозитории. Например, если создают для iOS новый, но схожий с другим проект, то могут скопировать лишний код или ресурсные файлы, которые при проверке Apple ревьюверами может привести к отклонению приложения.
    Типичные баги:
● креши
● функциональные ошибки
● несоответствие стандартам или гайдлайнам
● увеличение размера приложения

    Тур предыдущей версии (The Prior Version Tour)
После обновления приложения пользователь должен легко и быстро адаптироваться к новому функционалу, или новым путям использования приложения. Особенно это важно проверять, когда вырезается какой-то функционал, изменяется интерфейс или даже исправляется очень старый баг, который некоторые пользователи могли использовать как фичу.
    Типичные баги:
● ошибки юзабилити
● функциональные ошибки, связанные с утратой функциональности, потерей данных, ошибками в логике


3. Туры по туристическому району (Tours Through the Tourist District)

Во многих городах есть места, которые интересны только туристам и пользователям-новичкам. Местные ребята избегают таких мест, поскольку им там тесно. То есть (прим. для ПО) пользователи, которые уже имеют опыт взаимодействия с приложением, подобные функции почти не используют. Быстрые проверки, с целью просто пробежаться по функциям. Мол, “я здесь был”.

    Тур коллекционера (The Collector’s Tour)
Собирайте всевозможные артефакты вашего приложения – то, что пользователь может сохранить себе, оставить “на память”; это всё, что приложение “отдает” пользователю. Например, в браузере – это история, закладки, посещенные страницы, в файловом менеджере – файлы разных форматов, папки всевозможные и т.д.
    Типичные баги: в основном, некритичные функциональные ошибки

    Тур одинокого бизнесмена (The Lonely Businessman Tour)
Доберитесь до фичи, которая находится глубже всего, дальше всего от старта приложения. Или же выберите какую-то фичу и доберитесь до неё самым длинным путем, какой сможете придумать.
    Типичные баги: разные – от функциональных (чаще некритических), до багов в удобстве использования, интерфейсе, локализации, производительности или в не полноте справки.

    Тур супермодели (The Supermodel Tour)
Этот тур о внешнем интерфейсе приложения: красив ли, привлекателен ли, правильно ли используются цвета, нет ли лишних артефактов в интерфейсе, интересная и быстрая ли анимация, соответствует ли интерфейс принятым стандартам, ожиданиям пользователя.
Приложение может содержать много багов, но и как супермодель на подиуме, оно будет смотреться великолепно!
    Типичные баги: проблемы интерфейса и удобства использования.

    Тур шопоголика (The TOGOF Tour – Test One Get One Free)
Необходимо создать ситуацию, в которой несколько копий одного и того же приложения используют один и тот же объект, одну и ту же фичу в один момент времени. Например, запустить несколько приложений и обращаться к одному файлу или разделу виртуальной памяти; залогиниться несколькими пользователями в разные приложения; удалять и редактировать одновременно одну и ту же статью; по одной сети отправлять на сервер конфликтующие данные в один момент времени и т.д.
Почему TOGOF? Найдя баг в одной копии приложения, вы находите его и в другой. Бесплатно 🙂
    Типичные баги:
● недоработки в логике, приводящие как к некритичным, так и к критичным багам
● непонятные для пользователя сообщения об ошибках (формата “error 784”)
● проблемы производительности

    Тур по шотландским пабам (The Scottish Pub Tour)
На форумах, в блогах, при общении с пользователями, да и просто блуждая по приложению можно найти неожиданные для себя, как тестировщика, фичи, но те, которые полюбились настоящему ценителю-пользователю. Этот тур наиболее хорош для очень больших приложений. Его задача состоит не только в том, чтобы проверить, но и в том, чтобы глубже познакомиться с приложением (в идеале, посредством общения с пользователем).
    Типичные баги: совершенно разные.


4. Туры по району развлечений (Tours Through the Entertainment District)

В большинстве приложений есть места, где можно отвлечься от основной бизнес-задачи (сценария использования). Например, настроить приложение под свои особенные нужды, или навести “красоту” изменяя шрифт и цвет текста и т.п.

    Тур актера второго плана (The Supporting Actor Tour)
Выполняя этот тур, используйте, изучайте, проверяйте не ключевой функционал, а тот, что его окружает – не главный, не столь заметный, но такой, который найдёт своего пользователя.
Типичные баги: разные, но больше интерфейс, лингвистика или некритичные функциональные ошибки.

    Тур по темным переулкам (The Back Alley Tour)
Это путешествие по фичам, которые маловероятно, что будут использоваться, по фичам, наименее привлекательным для пользователей. Если у тестировщика есть статистика по использованию приложения, то в этом туре он может следовать по фичам из самых нижних позиций рейтинга.
    Типичные баги:
● некритичные функциональные ошибки
● определение мест и фич, назначение которых пользователь вообще не понимает без подсказки или справки
● ошибки юзабилити: примеры странного, нелогичного поведения
● ошибки лингвистики
● ошибки интерфейса

    Тур любителя ночной жизни (The All-Nighter Tour or Clubbing Tour)
Сколько сможет выдержать ваше приложение без перезагрузки? Никогда не перезапускайте приложение! Используйте одну и ту же фичу постоянно, повторяйте одно и то же действие раз за разом. Примеры: открыть файл и никогда его не закрывать, соединиться с сервером и никогда не разрывать соединение, запустить приложение и никогда его не перезапускать.
    Типичные баги:
● проблемы производительности и эффективности такие как утечки памяти, медленная скорость работы
● потеря данных
● функциональные ошибки


5. Туры по району отелей (Tours Through the Hotel District)

В каждом туристическом городе должны быть места, где можно отдохнуть, восстановить силы, переждать непогоду. Но вот ПО в моменты отдыха пользователя совсем не отдыхает. И хорошо бы проверить что и как оно делает. Место, где можно отвлечься от основной функциональности и популярных фич, и проверить что-то второстепенное.

    Тур, отмененный из-за дождя (The Rained-Out Tour)
Отменяйте любой начавшийся процесс; отменяйте любым способом – кнопкой “Cancel”, закрыть приложение (через Alt+F4, диспетчер задач), закрыть вкладку или окно Ctrl+F4, нажать ESC, в браузере остановить загрузку или перейти на страницу другую страницу или нажать кнопки “Вперед”, “Назад”, “Обновить”, “Остановить”. 
    Задача тестировщика:
1. убедиться, что отмена в целом возможна
2. что отмена действия не вызывает проблем в работе приложения
3. что данные не теряются и не повреждаются (здесь лучше смотреть на приложение не только “снаружи”, через UI, но и изнутри – через структуру приложения, через БД)
4. что действие, которое мы отменяем, можно вызвать повторно и успешно его выполнить
    Типичные баги:
● критичные и некритичные функциональные ошибки
● проблемы целостности данных
● юзабилити ошибки о невозможности отменить процесс

    Тур лежебоки (The Couch Potato Tour)
Идите по “дефолтному” пути: не изменяйте значений, установленных по умолчанию, не заполняйте поля, если в них нет строгой необходимости, не переходите по рекламе, пытайтесь перейти между экранами, не нажимая кнопок и не вводя данных, не беспокойтесь о части ELSE в конструкции IF-THEN-ELSE, не совершайте комплексных действий – идите по пути “наименьшего сопротивления”.
    Типичные баги:
● проблемы юзабилити
● функциональные ошибки

6. Туры по неблагополучному району (Tours Through the Seedy District)

Это небезопасные район, которые, однако, для кое-кого представляют некоторый интерес. Там творятся плохие вещи, и, видимо, будет лучше не лезть туда. Всем, кроме тест-инженеров. Эти места должны быть протестированы, поскольку они могут содержать уязвимости продукта. Места приложения, подверженные атакам недобропорядочных пользователей.

    Тур саботажника, диверсанта (The Saboteur Tour)
Задача тестировщика – попробовать подорвать (подстрекнуть) работу приложения любым возможным способом.
    И для этого можно выполнить 4 главных шага:
1. Начните выполнять какое-то действие
2. Определите какие ресурсы нужны системе, чтобы выполнить это действие
3. Удалите или ограничьте системе доступ к этим ресурсам.
4. Повторите действие
Примерами условий для тестов могут быть: отсутствие интернета, недостаточное количество оперативной памяти, удаленный файл, который нужно прочитать, отсутствие необходимых для выполнения операции прав, поиск или запрос несуществующего объекта, запуск и работа приложения на изначально проблемном окружении, подкладывание в систему битых файлов или данных, параллельная работа с другим приложением за конфликтующие ресурсы.
    Типичные баги:
● креши
● непонятные для пользователя по формулировке сообщения об ошибках
● функциональные ошибки средней критичности

    Антисоциальный тур (The Antisocial Tour)
Работать так, как нормальные пользователи делать не будут, выполнять всё, что противоречит логике приложения, вводить данные, которые должно быть запрещено вводить.
    Антисоциальный тур подразделяется на 3:
1. Противоположный тур (opposite tour). Предполагает вводить или выбирать те значения, которые пользователь маловероятно, что выберет. Например, в плейлист добавить 10763 песен, или отправить на печать 12 копий. В этом туре речь идет именно о тестировании на позитивных, но маловероятных данных.
2. Криминальный тур (crime spree tour). Предполагает вводить недопустимые (нелегальные) значения – это и sql инъекции, и ввод текста в цифровые поля, и подмена данных.
3. Тур с неправильными поворотами (wrong turn tour). Предполагает выполнять действия в неправильной, нестандартной для пользователя последовательности, менять действия местами. Например, сначала указать адрес доставки, а потом выбирать товар; сначала в пустом плеере включить shuffle песен, а затем запускать сами песни и т.д.
    Типичные баги:
● креши и другие функциональные ошибки
● уязвимости в защищенности
● непонятные для пользователя по формулировке сообщения об ошибках
● проблемы в юзабилити

    Обсессивно-компульсивный тур или тур невротика (The Obsessive-Compulsive Tour)
Повторяйте одно и то же – вводите один и тот же текст раз за разом, выполняйте многократно какое-то действие или последовательность действий. 
Например:
1. осуществите поиск в интернет-магазине
2. откройте информацию по любому товару
3. положите товар в корзину
4. повторите шаги 1-3 очень много раз
А можно просто осуществлять постоянно поиск. Это тоже относится к этому туру.
    Типичные баги:
● некритичные функциональные ошибки
● проблемы производительности
● утечки памяти

    Туры привносят структуру в тестирование. Они помогают тест-инженерам обнаружить более актуальные и интересные сценарии, нежели при freestyle тестировании. Предоставляя тест-инженерам цели, туры подталкивают их на определенный путь, которые являются более сложными нежели классическое тестирование, основанное на декомпозиции функциональностей. Туры – инструмент для изучения фич в их комбинации. К тому же туры – это то, что является фиксируемым, их можно повторять и исключает многие проблемы пересечения тест-инженеров. Какие-то туры будут более удачные, какие-то менее. Опытным путем это можно определить. А далее их можно ранжировать различными способами (по найденным ошибкам, по времени выполнения, по покрытию кода/фич/интерфейса). Турами можно управлять, и это важно. На них можно учиться. Их можно распределять в команде. Можно определять их эффективность. Они помогают придать структуру тестированию и знаниям.
