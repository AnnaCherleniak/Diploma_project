2.1 Особенности Исследовательского тестирования

Исследовательское тестирование – это одновременное изучение программы, проектирование и выполнение тестов. Этот подход — противоположность сценарного, когда список проверок составлен до проведения тестирования. Исследовательские тесты не определены заранее и не выполняются в точном соответствии с планом. Исследовательское тестирование — это не методика тестирования. Это подход или образ мыслей, который можно применить к любой методике. Исследовательское тестирование не должно выполняться небрежно, в спешке. Такой подход требует тщательной подготовки, а знания и умения тестировщика — важная форма этой подготовки. Исследовательское тестирование может проводиться как вручную, так и со вспомогательными инструментами.

Когда применять исследовательское тестирование?
● Нужна быстрая обратная связь о новом продукте.
● Нужно быстро изучить продукт.
● Сценарное тестирование не находит баги, требует разнообразия.
● Нужно принять решение о необходимости покрытия области сценарными тестами.
● Требований нет, они неполные или устарели.
● Продукт маленький, разработка тестовых сценариев займёт больше времени, чем сам процесс тестирования.

Преимущества исследовательского тестирования
1. Нестандартные ходы выявляют нестандартные дефекты.
2. Не тратится время на описание всех сценариев.
3. Не нужна поддержка тестовых сценариев.
4. Не наступает «эффект пестицида».
5. Можно тестировать без требований.
6. Тесты могут стать интереснее и креативнее.

Ограничения для исследовательского тестирования
Чистое исследовательское тестирование хорошо работает на небольших краткосрочных проектах или на начальных этапах жизни продукта. В первом случае объёмная тестовая документация может не оправдать времени, затраченного на её написание. Во втором — требования могут быть очень размытыми, так как нет определённости, в каком направлении будет двигаться разработка. Функциональность будет меняться, так что потребуется постоянная актуализация тест-кейсов.

    Как организовать исследовательское тестирование?

  Для управления исследовательским тестированием может использоваться Session-Based Test Management. В основе этой модели лежат:
● Тестовые сессии – ограниченные промежутки времени, в рамках которых происходит тестирование‎. При этом каждая сессия имеет тему.
● Отчеты по результатам сессий, оформленные в пригодной для парсинга и сбора статистики форме.
● Обсуждение лидом и тестировщиком результатов проведенной сессии.
 
  Идея туров в исследовательском тестировании
Чтобы систематизировать исследовательское тестирование можно использовать идею туров.  Туры – это идеи и инструкции по исследованию программного продукта, объединенные определённой общей темой или целью. Туры, как правило, ограничены по времени – длительность тестовой сессии не должна превышать 4 часа.


2.1.1 Идея туров в исследовательском тестировании. Туры Джеймса Виттакера.(12)

Джеймс Виттакер, хоть и не придумал саму идею туров, но предложил свой подход к исследовательскому тестированию с использованием туров и в своей книге “Exploratory Software Testing” в доступной форме озвучил идею туров и описал сами туры.
Тур – это своего рода план тестирования, он отражает основные цели и задачи, на которых будет сконцентрировано внимание тестировщика во время сессии исследовательского тестирования. При этом Виттакер использует метафору, что тестировщик – это турист, а тестируемое приложение – это город. Обычно у туриста (тестировщика) мало времени, поэтому он выполняет конкретную задачу в рамках выбранного тура, ни на что другое не отвлекаясь. Город (ПО) разбит на  районы: бизнес-районы, исторический район, район развлечений, туристический район, район отелей, захудалый район.

Туры
1. Туры по бизнес-центру (Tours of the Business District)

    Это места, где «делается бизнес». Они начинаются с запуска кода и до завершения его работы. В них расположены функции, ради которых пользователи и используют данное приложение. Это «задняя стенка коробки», которая является главной при демонстрации коммерческой ценности продукта, а также код, который это поддерживает.

  Тур по путеводителю (Guidebook Tour)
    Путеводители часто содержат много информации о местах, которые можно посмотреть. Они рассказывают о лучших отелях, торговых комплексах и привлекательных местах без подробных деталей. Эксперты, посетившие эти места, любезно скажут туристам, как именно нужно наслаждаться этими местами. Здесь должно быть красиво, чисто, безопасно, чтобы туристы могли спокойно тратить свои деньги. Это очень важные места, и они должны быть включены в тестовую стратегию исследовательского тестирования. Мы должны заботиться о том, чтобы пользователи получали пользу и удовольствие от работы здесь.
    Вариантом такого тура является строгое следование руководству пользователя, предоставленное (если предоставлено) производителем, в котором даны описания ключевых функций. Цель в том, чтобы пройти все сценарии, которые описаны в руководстве пользователя, так полно, как это возможно. Зачастую здесь можно найти различные советы по входным данным и навигации по интерфейсу в процессе использования функций. Помимо самой функциональности этот тур позволяет проверить и то, насколько точно и аккуратно составлено руководство пользователя.
    Разновидностями тура также являются тур блоггера, который содержит советы третьей стороны, а также тур эксперта, который рассматривает отзывы неудовлетворенных пользователей. Этому могут помочь различные форумы, новости, сообщества или даже книги (в случае, если приложение большое). Еще один полезный тур – тур конкурента, который позволяет рассмотреть приложение со стороны конкурирующей системы.
    Вышеуказанные варианты тура по путеводителю позволяют оценить приложение в разрезе его разрекламированных функций. Это незамысловатые тесты, и любое отклонение от руководства должны воспринимать как ошибка. Указанный тур позволяет нам использовать функции именно в такой последовательности и взаимосвязи, в какой это будут делать сами пользователи.
    Типичные баги:
● Несоответствия описанных шагов в справке работе приложения
● Несоответствия скриншотов в справке и самого приложения
● Ошибки (от орфографических до логических) в справке
● Ошибки удобства использования справки: длинная или короткая, непонятная или примитивная, не отвечающая на те вопросы, которые предполагают прочитать пользователи
● Ошибки удобства использования приложения

  Денежный тур (Money Tour)
Каждое приложение имеет функциональность, которая, в глазах пользователя (заказчика), принесет им деньги. «Это самое привлекательно для меня» — скажет в этом случае пользователь. «Денежная» функциональность несет с собой «денежную силу». Сюда входят различные нюансы использования продукта, поскольку именно они позволяют зарабатывать деньги. Специалисты по продажам могут направлять демонстрацию продукта в сторону указанных сценариев, затрагивая то, что не было четко зафиксировано в документации к продукту. Такое «продажное видение» – отличная основа для денежного тура.
    В указанном туре важно услышать то, как специалисты по продажам преподносят продукт, и пройтись именно по тому, на чем ставится акцент. Во время подобного тестирования вы не только находите ошибки, но и сохраняете видение «денежной жилы» приложения.
    Разновидность денежного тура – тур скептически настроенного заказчика. Проходясь по туру, вы внезапно останавливаетесь и спрашиваете: «А что, если я сделаю вот так?» или «А как мне сделать это?». «А что, если я сейчас дополню проход такими сценариями, которые выходят за рамки изначально задуманных? Возьму да включу сюда еще парочку фич!».
    Типичные баги:
● Напрочь отсутствие в приложении некоторых описанных в промо-материалах возможностей
● Несоответствие информации в рекламных материалах и работы самого приложения
● Функциональные ошибки в работе приложения, влияющие на демонстрацию
● Устаревшие скриншоты приложений
● Лингвистические ошибки (от орфографических до логических)

  Тур по отметкам (Landmark Tour)
    Мы выбираем какие-либо ориентиры и осуществляем скачок к одному из них через все приложение. Например, мы выбираем ключевую функцию в качестве отметки, которую мы определили в туре по путеводителю или в денежном туре. Далее мы составляем набор из таких отметок, определяем их порядок и исследуем приложение от отметки к отметке, пока не достигнем каждой из них. Далее можно создать карту покрытия отметками. Разный порядок, разные отметки – вот поле для вариативности подобного тура.
    Типичные баги: блокирующие, критические проблемы в работе приложения.

  Интеллектуальный тур (The Intellectual Tour)
Задавайте приложению сложные, интеллектуальные вопросы. Как можно заставить работать приложение так тяжело, как это возможно? Какие фичи приблизят его к собственному лимиту? Какой ввод и входные данные заставят его напрягаться? Какие данные могут обмануть процедуры проверки ошибок? Очевидно, это напрямую зависит от особенностей конкретного приложения.
    Вариант – тур наглого американца, который использует стереотипы об иностранцах. Задавай глупые вопросы, старайся насолить, привлекай к себе внимание. Придумывайте препятствия и посмотрите, как с ними справится приложение. Имеет ли это смысл? Возможно и нет. Но ведь мы можем так сделать.
    Интеллектуальный тур и его варианты могут помочь найти как действительно сложные и приоритетные ошибки, так и глупые ошибки. Нужно уметь различать их. Для этого необходимо создавать реальные случаи, чтобы в будущем было легче аргументировать то, что это важно и это нужно исправлять.
    А именно, при работе приложения задумываться о сложных, но реалистичных сценариях, обычно связанных с объемом данных, скоростью выполнения операции, осознанном вызове ошибок:
● в проигрывателе прослушать аудиофайл длительностью в 10 часов
● в текстовом редакторе создать объемный файл
● указать длинное имя файла
● при работе мобильного приложения вызывать телефонный звонок
● выполнять какое-то действие очень быстро
● на форме заполнить все поля ошибочными данными
    Типичные баги:
● Креши приложения при выходе за граничные значения
● Автоматические прерывания текущих процессов, изменение состояние приложения
● Недоработки в логике
● Низкая производительность, медленная работа приложения
● Потеря данных
● Примитивные ошибки в удобстве использования (например, в файловом менеджере мало места отведено под название документа и нет возможности его просмотреть другим способом)

  Тур службы доставки (FedEx)
    Думайте о данных, которые должны проходить через приложение. Данные начинают свой путь с ввода, далее хранятся во внутренних хранилищах и переменных, где часто происходит их обработка и изменение, а далее они могут подвергаться вычислениям. В конце большинство из таких данных предоставляются пользователю или куда-либо еще.
    Нужно концентрироваться на данных. Нужно определить сохраненные данные и «проследить» их путь через приложение. Вот ввели вы, к примеру, адрес своей почты. А где он отображается? В каких местах? Попробуйте найти все области, с которыми соприкасаются данные. Определите весь их жизненный цикл.
    Типичные баги: совершенно разные – от критических функциональных до багов в удобстве использования, интерфейсе, локализации (поддержка форматов разных стран).
  
    Тур «после работы», внеурочный тур (The After-Hours Tour)
    После денежной активности приложения, оно все еще продолжает работу. Это поддержка задач, архивация данных и файлов. Это может быть автоматическим процессом, но его также можно выполнять принудительно. Данный тур напоминает нам делать это.
    То, что пользователь перестает использовать приложение, не обозначает, что приложение останавливает работу. Часто приложение бэкапит данные, архивирует, получает обновления и т.д. Тестировщик должен проследить за этими операциями.
    Типичные баги:
● проблемы неэффективного использования ресурсов (нерациональное использование трафика, места на диске, процессора, утечки памяти и т.п.)
● функциональные ошибки иногда приводящие к остановке работы приложения

  Тур уборщика (The Garbage Collector’s Tour)
    Для тестировщика этот тур похож на выборочную проверку, в процессе которой он по кратчайшему пути должен методично переходить с экрана на экран, вызывать диалог за диалогом и проверять какую-то простую примитивную вещь, не углубляясь особо в детали. Например, наличие и правильность заголовков на всех окнах, зеленый цвет кнопки сохранения везде, где она есть, наличие метки с количеством комментариев к статье везде, где эта статья как-то упоминается и т.д.
Указанный тур включает выбор цели (все меню, ошибки, диалоговые окна, к примеру) и посещение каждой из них наиболее коротким путем.


2. Туры по историческому району (Tours Through the Historical District)

    Это излюбленные туристами исторические места, места, окруженные историей. Сюда включены места, связанные с предыдущей версий, со старым функционалом или кодом, которые исторически содержали большое количество ошибок. Его использование и изменение подразумевает большое количество предположений. Именно на этом компоненте и сосредотачивается данный тур.

    Тур по нерекомендуемым местам (The Bad-Neighborhood Tour)
В приложении – это фичи или места в коде с наибольшим скоплением багов. Про эти места вы можете знать интуитивно, а можете воспользоваться багтрекером. Как только вы нашли один баг, знайте, что, скорее всего, рядом есть и другой; он может находиться в том же функционале, а может и в соседнем. Задача тестировщика состоит в том, чтобы пройти по местам. Связано это с тем, что баги имеют свойство скапливаться в одном месте.
    Тур также применим и после исправления багов. Пройдитесь взаимосвязанным областям.
    Типичные баги: функциональные.

    Музейный тур (The Museum Tour)
Код тоже может быть “античным”. Это тот код, который давно не изменялся. Такой код, попадая в новую среду, может вообще не работать, или, подвергаясь внешнее ревизии, может оказаться непригодным. Тестировщики могут найти такой код по метке даты изменения в репозитории. Например, если создают для iOS новый, но схожий с другим проект, то могут скопировать лишний код или ресурсные файлы, которые при проверке Apple ревьюверами может привести к отклонению приложения.
    Типичные баги:
● креши
● функциональные ошибки
● несоответствие стандартам или гайдлайнам
● увеличение размера приложения

    Тур предыдущей версии (The Prior Version Tour)
После обновления приложения пользователь должен легко и быстро адаптироваться к новому функционалу, или новым путям использования приложения. Особенно это важно проверять, когда вырезается какой-то функционал, изменяется интерфейс или даже исправляется очень старый баг, который некоторые пользователи могли использовать как фичу.
    Типичные баги:
● ошибки юзабилити
● функциональные ошибки, связанные с утратой функциональности, потерей данных, ошибками в логике


3. Туристические районы

Во многих городах есть места, которые интересны только туристам и пользователям-новичкам. Местные ребята избегают таких мест, поскольку им там тесно. То есть (прим. для ПО) пользователи, которые уже имеют опыт взаимодействия с приложением, подобные функции почти не используют.

4. Туры по району развлечений (Tours Through the Entertainment District)

В большинстве приложений есть места, где можно отвлечься от основной бизнес-задачи (сценария использования). Например, настроить приложение под свои особенные нужды, или навести “красоту” изменяя шрифт и цвет текста и т.п.

    Тур актера второго плана (The Supporting Actor Tour)
Выполняя этот тур, используйте, изучайте, проверяйте не ключевой функционал, а тот, что его окружает – не главный, не столь заметный, но такой, который найдёт своего пользователя.
Типичные баги: разные, но больше интерфейс, лингвистика или некритичные функциональные ошибки.

    Тур по темным переулкам (The Back Alley Tour)
Это путешествие по фичам, которые маловероятно, что будут использоваться, по фичам, наименее привлекательным для пользователей. Если у тестировщика есть статистика по использованию приложения, то в этом туре он может следовать по фичам из самых нижних позиций рейтинга.
    Типичные баги:
● некритичные функциональные ошибки
● определение мест и фич, назначение которых пользователь вообще не понимает без подсказки или справки
● ошибки юзабилити: примеры странного, нелогичного поведения
● ошибки лингвистики
● ошибки интерфейса

    Тур любителя ночной жизни (The All-Nighter Tour or Clubbing Tour)
Сколько сможет выдержать ваше приложение без перезагрузки? Никогда не перезапускайте приложение! Используйте одну и ту же фичу постоянно, повторяйте одно и то же действие раз за разом. Примеры: открыть файл и никогда его не закрывать, соединиться с сервером и никогда не разрывать соединение, запустить приложение и никогда его не перезапускать.
    Типичные баги:
● проблемы производительности и эффективности такие как утечки памяти, медленная скорость работы
● потеря данных
● функциональные ошибки



5. Районы отелей

В каждом туристическом городе должны быть места, где можно отдохнуть, восстановить силы, переждать непогоду. Но вот ПО в моменты отдыха пользователя совсем не отдыхает. И хорошо бы проверить что и как оно делает.

6. Захудалые районы

Это небезопасные район, которые, однако, для кое-кого представляют некоторый интерес. Там творятся плохие вещи, и, видимо, будет лучше не лезть туда. Всем, кроме тест-инженеров. Эти места должны быть протестированы, поскольку они могут содержать уязвимости продукта.

